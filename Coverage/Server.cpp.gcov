        -:    0:Source:Server.cpp
        -:    1:#include "Server.hpp"
        -:    2:#include "CommandHandler.hpp"
        -:    3:#include <cstring>
        -:    4:#include <arpa/inet.h>
        -:    5:
        1:    6:Server::Server(int port) : port(port) {
        -:    7:    // Initialize serverRunning flag to true
        1:    8:    serverRunning = std::make_shared<std::atomic<bool>>(true);
        1:    9:}
        -:   10:
        1:   11:Server::~Server() {
        -:   12:    // Ensure the server stops when the object is destroyed
        1:   13:    stop();
        1:   14:}
        -:   15:
        1:   16:void Server::start() {
        -:   17:    // Check if the server is already stopped
        1:   18:    if (!serverRunning->load()) {
    #####:   19:        std::cout << "Server is already stopped." << std::endl;
    #####:   20:        return;
        -:   21:    }
        -:   22:
        -:   23:    // Create a socket
        1:   24:    server_fd = socket(AF_INET, SOCK_STREAM, 0);
        1:   25:    if (server_fd == 0) {
    #####:   26:        perror("Failed to create socket");
    #####:   27:        exit(EXIT_FAILURE);
        -:   28:    }
        -:   29:
        -:   30:    sockaddr_in address;
        1:   31:    int opt = 1;
        -:   32:    
        -:   33:    // Set socket options to reuse the address
        1:   34:    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt))) {
    #####:   35:        perror("setsockopt failed");
    #####:   36:        exit(EXIT_FAILURE);
        -:   37:    }
        -:   38:
        -:   39:    // Configure server address
        1:   40:    address.sin_family = AF_INET;
        1:   41:    address.sin_addr.s_addr = INADDR_ANY;
        1:   42:    address.sin_port = htons(port);
        -:   43:
        -:   44:    // Bind the socket to the specified port
        1:   45:    if (bind(server_fd, (struct sockaddr*)&address, sizeof(address)) < 0) {
    #####:   46:        perror("bind failed");
    #####:   47:        exit(EXIT_FAILURE);
        -:   48:    }
        -:   49:
        -:   50:    // Listen for incoming connections (maximum 3 in the queue)
        1:   51:    if (listen(server_fd, 3) < 0) {
    #####:   52:        perror("listen failed");
    #####:   53:        exit(EXIT_FAILURE);
        -:   54:    }
        -:   55:
        1:   56:    std::cout << "Server started on port " << port << std::endl;
        -:   57:
        -:   58:    // Main server loop
        3:   59:    while (serverRunning->load()) {
        -:   60:        sockaddr_in client_address;
        2:   61:        socklen_t client_addrlen = sizeof(client_address);
        -:   62:        
        -:   63:        // Accept incoming connections
        2:   64:        int client_fd = accept(server_fd, (struct sockaddr*)&client_address, &client_addrlen);
       2*:   65:        if (client_fd < 0) {
    #####:   66:            if (serverRunning->load()) {
    #####:   67:                perror("Failed to accept");
        -:   68:            }
    #####:   69:            continue;
        -:   70:        }
        -:   71:
        -:   72:        // Launch a new thread to handle the client connection
        2:   73:        std::thread client_thread(&Server::handleClient, this, client_fd);
        -:   74:        
        -:   75:        // Ajouter le thread au vecteur de threads de manière sécurisée
        -:   76:        {
        2:   77:            std::lock_guard<std::mutex> lock(threads_mutex);
        2:   78:            threads.emplace_back(std::move(client_thread));
        2:   79:        }
        2:   80:    }
        -:   81:
        -:   82:    // Stop the server when the loop ends
        1:   83:    stop();
        -:   84:}
        -:   85:
        -:   86:
        2:   87:void Server::stop() {
        2:   88:    std::call_once(stop_flag, [this]() {
        -:   89:        {
        1:   90:            std::lock_guard<std::mutex> lock(coutMutex);
        1:   91:            serverRunning->store(false); // Signal server to stop running
        1:   92:        }
        1:   93:        close(server_fd); // Close the server socket
        -:   94:
        -:   95:        // Joindre tous les threads dans le vecteur de threads de manière sécurisée
        -:   96:        {
        1:   97:            std::lock_guard<std::mutex> lock(threads_mutex);
        3:   98:            for (auto& t : threads) {
        2:   99:                if (t.joinable()) {
        2:  100:                    t.join(); // Ensure all client threads are joined
        -:  101:                }
        -:  102:            }
        1:  103:            threads.clear(); // Optionnel : effacer le vecteur après avoir joint tous les threads
        1:  104:        }
        -:  105:        
        1:  106:        std::cout << "Server stopped." << std::endl;
        1:  107:    });
        2:  108:}
        -:  109:
        2:  110:void Server::handleClient(int client_fd) {
        2:  111:    char buffer[1024] = {0};
        2:  112:    std::string clientMessage;
        2:  113:    CommandHandler<double> commandHandler(serverRunning);
        -:  114:
        -:  115:    // Client handling loop
       29:  116:    while (serverRunning->load()) {
        -:  117:        // Read data from the client
       28:  118:        ssize_t valread = read(client_fd, buffer, sizeof(buffer));
       28:  119:        if (valread <= 0) {
    #####:  120:            break;  // Stop reading if the client disconnects or an error occurs
        -:  121:        }
        -:  122:
        -:  123:        // Convert the buffer to a string and clean up newlines
       28:  124:        clientMessage = std::string(buffer, valread);
       28:  125:        clientMessage.erase(std::remove(clientMessage.begin(), clientMessage.end(), '\n'), clientMessage.end());
        -:  126:
        -:  127:        // Handle the client's command
       28:  128:        commandHandler.handleCommand(client_fd, clientMessage);
        -:  129:
        -:  130:        // If the server is instructed to stop, break the loop
       28:  131:        if (!serverRunning->load()) {
        1:  132:            break;
        -:  133:        }
        -:  134:    }
        -:  135:
        -:  136:    // Close the connection with the client
        2:  137:    close(client_fd);
        2:  138:}
