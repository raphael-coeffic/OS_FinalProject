        -:    0:Source:Graph.hpp
        -:    1:// #ifndef GRAPH_HPP
        -:    2:// #define GRAPH_HPP
        -:    3:
        -:    4:// #include "GraphBase.hpp"
        -:    5:
        -:    6:// template<typename T>
        -:    7:// class Graph : public GraphBase<T> {
        -:    8:// public:
        -:    9://     // Constructeur pour initialiser un graphe avec 'V' sommets
        -:   10://     Graph(int V) : GraphBase<T>(V) {}
        -:   11:
        -:   12://     // Ajouter une arête dans le graphe (non orienté)
        -:   13://     void addEdge(int u, int v, T weight) override {
        -:   14://         this->adj[u].push_back(std::make_pair(v, weight)); // u -> v
        -:   15://         this->adj[v].push_back(std::make_pair(u, weight)); // v -> u (non orienté)
        -:   16://     }
        -:   17:
        -:   18://     // Supprimer une arête dans le graphe (non orienté)
        -:   19://     void removeEdge(int u, int v) override {
        -:   20://         this->adj[u].remove_if([v](const std::pair<int, T>& edge) {
        -:   21://             return edge.first == v;
        -:   22://         });
        -:   23://         this->adj[v].remove_if([u](const std::pair<int, T>& edge) {
        -:   24://             return edge.first == u;
        -:   25://         });
        -:   26://     }
        -:   27:
        -:   28://     // Affichage du graphe
        -:   29://     void print() const override {
        -:   30://         for (size_t u = 0; u < this->adj.size(); ++u) {
        -:   31://             std::cout << "Sommet " << u << " est connecté à :";
        -:   32://             for (auto [v, weight] : this->adj[u]) {
        -:   33://                 std::cout << " (Sommet " << v << ", Poids " << weight << ")";
        -:   34://             }
        -:   35://             std::cout << std::endl;
        -:   36://         }
        -:   37://     }
        -:   38:// };
        -:   39:
        -:   40:// #endif // GRAPH_HPP
        -:   41:#ifndef GRAPH_HPP
        -:   42:#define GRAPH_HPP
        -:   43:
        -:   44:#include "GraphBase.hpp"
        -:   45:#include <stdexcept> // For std::out_of_range
        -:   46:
        -:   47:template<typename T>
        -:   48:class Graph : public GraphBase<T> {
        -:   49:public:
        -:   50:    // Constructor to initialize a graph with 'V' vertices
        2:   51:    Graph(int V) : GraphBase<T>(V) {}
        -:   52:
        -:   53:    // Add an edge to the graph (undirected)
        9:   54:    void addEdge(int u, int v, T weight) override {
        9:   55:        checkVertex(u); // Ensure the vertex 'u' is valid
        9:   56:        checkVertex(v); // Ensure the vertex 'v' is valid
        9:   57:        this->adj[u].push_back(std::make_pair(v, weight)); // u -> v
        9:   58:        this->adj[v].push_back(std::make_pair(u, weight)); // v -> u (undirected)
        9:   59:    }
        -:   60:
        -:   61:    // Remove an edge from the graph (undirected)
    #####:   62:    void removeEdge(int u, int v) override {
    #####:   63:        checkVertex(u); // Ensure the vertex 'u' is valid
    #####:   64:        checkVertex(v); // Ensure the vertex 'v' is valid
        -:   65:        // Remove the edge u -> v
    #####:   66:        this->adj[u].remove_if([v](const std::pair<int, T>& edge) {
    #####:   67:            return edge.first == v;
        -:   68:        });
        -:   69:        // Remove the edge v -> u (since it's undirected)
    #####:   70:        this->adj[v].remove_if([u](const std::pair<int, T>& edge) {
    #####:   71:            return edge.first == u;
        -:   72:        });
    #####:   73:    }
        -:   74:
        -:   75:    // Print the graph (list of vertices and their connections)
    #####:   76:    void print() const override {
    #####:   77:        for (size_t u = 0; u < this->adj.size(); ++u) {
    #####:   78:            std::cout << "Vertex " << u << " is connected to :";
    #####:   79:            for (auto [v, weight] : this->adj[u]) {
    #####:   80:                std::cout << " (Vertex " << v << ", Weight " << weight << ")";
        -:   81:            }
    #####:   82:            std::cout << std::endl;
        -:   83:        }
    #####:   84:    }
        -:   85:
        -:   86:private:
        -:   87:    // Check if the vertex index is valid
       18:   88:    void checkVertex(int v) const {
      18*:   89:        if (v < 0 || v >= static_cast<int>(this->adj.size())) {
    #####:   90:            throw std::out_of_range("Invalid vertex index");
        -:   91:        }
       18:   92:    }
        -:   93:};
        -:   94:
        -:   95:#endif // GRAPH_HPP
